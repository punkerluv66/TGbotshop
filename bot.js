require('dotenv').config();

const { Telegraf, Markup, Scenes } = require('telegraf');
const LocalSession = require('telegraf-session-local');
const sqlite3 = require('sqlite3').verbose();

const bot = new Telegraf(process.env.BOT_TOKEN);
bot.use((new LocalSession({ database: 'session_db.json' })).middleware());

const db = new sqlite3.Database('./shop.db', (err) => {
    if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    } else {
        console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite');
    }
});

const cart = {}; // –∫–æ—Ä–∑–∏–Ω—ã –ø–æ user_id
const lastActionTime = {}; // –∞–Ω—Ç–∏—Å–ø–∞–º

function isSpam(userId, action = 'default', delay = 2000) {
    const now = Date.now();
    const key = `${userId}_${action}`;
    if (lastActionTime[key] && now - lastActionTime[key] < delay) return true;
    lastActionTime[key] = now;
    return false;
}

bot.start((ctx) => {
    ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!', Markup.keyboard([
        ['–ö–∞—Ç–∞–ª–æ–≥'],
        ['–ö–æ—Ä–∑–∏–Ω–∞']
    ]).resize());
});

bot.hears('–ö–∞—Ç–∞–ª–æ–≥', async(ctx) => {
    try {
        db.all('SELECT * FROM products', [], (err, rows) => {
            if (err) return ctx.reply('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤');
            if (!rows.length) return ctx.reply('–¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');

            rows.forEach((product) => {
                if (product.amount > 0) {
                    ctx.reply(
                        `${product.name}\n–¶–µ–Ω–∞: ${product.price}‚ÇΩ\n–í –Ω–∞–ª–∏—á–∏–∏: ${product.amount} —à—Ç.`,
                        Markup.inlineKeyboard([
                            Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É', `buy_${product.id}`)
                        ])
                    );
                } else {
                    ctx.reply(`${product.name}\n‚ùå –í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏`);
                }
            });
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –ö–∞—Ç–∞–ª–æ–≥–µ:', error);
        ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞.');
    }
});

bot.action(/buy_(\d+)/, async(ctx) => {
    const userId = ctx.from.id;
    if (isSpam(userId, 'buy')) return ctx.answerCbQuery('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...');

    try {
        const id = Number(ctx.match[1]);
        db.get('SELECT * FROM products WHERE id = ?', [id], (err, product) => {
            if (err || !product) return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');

            let userCart = cart[userId] || {};

            if (userCart[id]) {
                if (userCart[id].quantity < product.amount) {
                    userCart[id].quantity += 1;
                    ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${product.name} (x${userCart[id].quantity})`);
                } else {
                    ctx.answerCbQuery(`–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ ${product.amount} —à—Ç.`, { show_alert: true });
                }
            } else {
                if (product.amount > 0) {
                    userCart[id] = { product, quantity: 1 };
                    ctx.answerCbQuery(`–î–æ–±–∞–≤–ª–µ–Ω–æ: ${product.name}`);
                } else {
                    ctx.answerCbQuery('‚ùå –¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏', { show_alert: true });
                }
            }
            cart[userId] = userCart;
        });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É.');
    }
});

bot.hears('–ö–æ—Ä–∑–∏–Ω–∞', async(ctx) => {
    const userId = ctx.from.id;
    if (isSpam(userId, 'cart')) return;

    try {
        const userCart = cart[userId] || {};
        if (Object.keys(userCart).length === 0) return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');

        let total = 0;
        const itemsText = Object.values(userCart).map(item => {
            const subtotal = item.product.price * item.quantity;
            total += subtotal;
            return `${item.product.name} x${item.quantity} - ${subtotal}‚ÇΩ`;
        }).join('\n');

        await ctx.reply(
            `üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n${itemsText}\n\n–ò—Ç–æ–≥–æ: ${total}‚ÇΩ`,
            Markup.inlineKeyboard([Markup.button.callback('–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑', 'start_checkout')])
        );
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∫–æ—Ä–∑–∏–Ω—ã:', error);
        ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.');
    }
});

const stage = new Scenes.Stage();
const checkoutScene = new Scenes.BaseScene('checkout');

checkoutScene.enter((ctx) => {
    ctx.session.checkoutStep = 'name';
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
});

checkoutScene.on('text', (ctx) => {
    if (ctx.message.text.toLowerCase() === '–æ—Ç–º–µ–Ω–∞') {
        ctx.reply('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return ctx.scene.leave();
    }
    const step = ctx.session.checkoutStep;
    if (step === 'name') {
        ctx.session.name = ctx.message.text;
        ctx.session.checkoutStep = 'surname';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:');
    } else if (step === 'surname') {
        ctx.session.surname = ctx.message.text;
        ctx.session.checkoutStep = 'phone';
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:');
    } else if (step === 'phone') {
        const phone = ctx.message.text;
        if (isValidPhone(phone)) {
            ctx.session.phone = phone;
            ctx.session.checkoutStep = 'address';
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:');
        } else {
            ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
        }
    } else if (step === 'address') {
        ctx.session.address = ctx.message.text;
        const userCart = cart[ctx.from.id];
        const total = calculateTotal(userCart);
        const itemsText = Object.values(userCart).map(item => `${item.product.name} x${item.quantity}`).join(', ');
        const summary = `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n–ò–º—è: ${ctx.session.name}\n–§–∞–º–∏–ª–∏—è: ${ctx.session.surname}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${ctx.session.phone}\n–ê–¥—Ä–µ—Å: ${ctx.session.address}\n–¢–æ–≤–∞—Ä—ã: ${itemsText}\n–ò—Ç–æ–≥–æ: ${total}‚ÇΩ\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?`;
        ctx.reply(summary, Markup.inlineKeyboard([
            Markup.button.callback('–î–∞', 'confirm_order'),
            Markup.button.callback('–ù–µ—Ç', 'cancel_order')
        ]));
    }
});

checkoutScene.action('confirm_order', (ctx) => {
    const userCart = cart[ctx.from.id];
    const total = calculateTotal(userCart);
    const itemsJSON = JSON.stringify(Object.values(userCart).map(item => ({
        id: item.product.id,
        name: item.product.name,
        price: item.product.price,
        quantity: item.quantity
    })));
    db.run('INSERT INTO orders (user_id, items, total, name, surname, phone, address) VALUES (?, ?, ?, ?, ?, ?, ?)', [ctx.from.id, itemsJSON, total, ctx.session.name, ctx.session.surname, ctx.session.phone, ctx.session.address],
        (err) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', err);
                return ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.');
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∫
            Object.values(userCart).forEach(item => {
                db.run('UPDATE products SET amount = amount - ? WHERE id = ?', [item.quantity, item.product.id], (err) => {
                    if (err) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', err);
                });
            });
            // –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ ${total}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É 1234 5678 9012 3456 –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @admin_username.`);
            // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–µ—Å—Å–∏—é
            delete cart[ctx.from.id];
            delete ctx.session.checkoutStep;
            delete ctx.session.name;
            delete ctx.session.surname;
            delete ctx.session.phone;
            delete ctx.session.address;
            return ctx.scene.leave();
        }
    );
});

checkoutScene.action('cancel_order', (ctx) => {
    ctx.reply('–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
    delete ctx.session.checkoutStep;
    delete ctx.session.name;
    delete ctx.session.surname;
    delete ctx.session.phone;
    delete ctx.session.address;
    return ctx.scene.leave();
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å—Ü–µ–Ω—É
stage.register(checkoutScene);
bot.use(stage.middleware());

bot.action('start_checkout', (ctx) => {
    if (!cart[ctx.from.id] || Object.keys(cart[ctx.from.id]).length === 0) {
        return ctx.reply('–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞');
    }
    ctx.scene.enter('checkout');
});

function isValidPhone(phone) {
    const phoneRegex = /^\+?\d{10,15}$/;
    return phoneRegex.test(phone);
}

function calculateTotal(userCart) {
    return Object.values(userCart).reduce((sum, item) => sum + item.product.price * item.quantity, 0);
}

bot.catch((err, ctx) => {
    console.error(`‚ùó –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from?.username || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}:`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

bot.launch();
module.exports = { db, cart };